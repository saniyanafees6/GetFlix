{"version":3,"sources":["axios.js","requests.js","Banner.js","Nav.js","Footer.js","Movie.js","Row.js","App.js","Success.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","dotenv","config","TMDB_API_KEY","process","requests","getTrending","getUpcoming","getNowPlaying","getSimilar","num","getMovieDetails","Banner","str","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","original_title","name","title","original_name","basic","color","content","to","id","overview","substr","Nav","Footer","Date","getFullYear","src","alt","numeral","require","stripePromise","loadStripe","Movie","props","movieId","match","params","console","log","handleClick","event","stripe","redirectToCheckout","lineItems","price","quantity","mode","successUrl","cancelUrl","error","genresList","nestedData","nestedArray","undefined","forEach","item","push","join","nestedDataToString","genres","totalRevenue","revenue","format","Image","poster_path","Header","as","tagline","release_date","runtime","vote_average","role","onClick","Row","fetchUrl","movies","setMovies","settings","dots","arrows","speed","slidesToShow","slidesToScroll","responsive","breakpoint","map","key","path","component","panes","menuItem","render","Tab","Pane","attached","App","menu","secondary","pointing","React","Component","Success","Boolean","window","location","hostname","routes","exact","from","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.29d2af74.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default instance;\n","import dotenv from 'dotenv';\n\ndotenv.config();\n\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n\nconst requests = {\n  getTrending: `/trending/movie/week?api_key=${TMDB_API_KEY}&language=en-US&page=1`,\n  getUpcoming: `/movie/upcoming?api_key=${TMDB_API_KEY}&language=en-US&page=1`,\n  getNowPlaying: `/movie/now_playing?api_key=${TMDB_API_KEY}&language=en-US&page=1`,\n  getSimilar: function (num) {\n    return `/movie/${num}/similar?api_key=${TMDB_API_KEY}&language=en-US&page=1`;\n  },\n  getMovieDetails: function (num) {\n    return `/movie/${num}?api_key=${TMDB_API_KEY}&language=en-US`;\n  },\n};\nexport default requests;\n","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport requests from './requests';\nimport './Banner.css';\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.getNowPlaying);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1) || 2\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n  function truncate(str, n) {\n    return str?.length > n ? `${str.substr(0, n - 1)}...` : str;\n  }\n\n  return (\n    <header\n      className='banner'\n      style={{\n        backgroundSize: 'cover',\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${movie?.backdrop_path}) `,\n        backgroundPosition: 'center center',\n      }}>\n      <div className='banner__contents'>\n        <h1>\n          {movie?.original_title ||\n            movie?.name ||\n            movie?.title ||\n            movie?.original_name}\n        </h1>\n\n        <div className='banner__buttons'>\n          <Link\n            basic\n            color='grey'\n            content='Grey'\n            className='poster__button'\n            to={`/movie/${movie?.id}`}>\n            <AiOutlineInfoCircle /> More Info\n          </Link>\n        </div>\n        <h2 className='banner__description'>\n          {truncate(movie?.overview, 150)}\n        </h2>\n      </div>\n      <div className='banner__gradient'></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Nav() {\n  return (\n    <div className='nav'>\n      <Link to='/'>\n        <h1 className='nav__title'>GetFlix</h1>\n      </Link>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n    <footer className='footer'>\n      <div className='container'>\n        <p>&copy; {new Date().getFullYear()}</p>\n        <p className='powered-by'>\n          Powered by:{' '}\n          <img\n            className='TMDB'\n            src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg'\n            alt='TMDB'\n          />\n          {' & '}\n          <img\n            className='stripe'\n            src='https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Stripe_Logo%2C_revised_2016.svg/1280px-Stripe_Logo%2C_revised_2016.svg.png'\n            alt='stripe'\n          />\n        </p>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { useEffect, useState } from 'react';\nimport { Image, Header } from 'semantic-ui-react';\nimport axios from './axios';\nimport './Movie.css';\nimport { loadStripe } from '@stripe/stripe-js';\nimport Nav from './Nav';\nimport Footer from './Footer.js';\n\nlet numeral = require('numeral');\n\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY;\nconst TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\n// Make sure to call `loadStripe` outside of a component’s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe(\n  'pk_test_51HMmfxLq0yPvXqQ0roUoxUqEUsLnamjo5nmqr1cYTChlPZNeOT6w4OpsL1c2SCu18RoPsbCZdin9qMVcTzjWlnMw006Bt82Vse'\n);\n\nfunction Movie(props) {\n  const { movieId } = props.match.params;\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(\n        `/movie/${movieId}?api_key=${TMDB_API_KEY}&language=en-US`\n      );\n      setMovie(request.data);\n      return request;\n    }\n    fetchData();\n  }, [movieId]);\n  console.log(movie);\n  function nestedDataToString(nestedData) {\n    let nestedArray = [],\n      resultString;\n    if (nestedData !== undefined) {\n      nestedData.forEach(function (item) {\n        nestedArray.push(item.name);\n      });\n    }\n    resultString = nestedArray.join(', '); // array to string\n    return resultString;\n  }\n\n  const handleClick = async (event) => {\n    // When the customer clicks on the button, redirect them to Checkout.\n    const stripe = await stripePromise;\n    const { error } = await stripe.redirectToCheckout({\n      lineItems: [\n        {\n          price: 'price_1HN8xvLq0yPvXqQ0BvYxQOBN', // Replace with the ID of your price\n          quantity: 1,\n        },\n      ],\n      mode: 'payment',\n      successUrl: `https://movie-rental-3745e.web.app/success/${movie.id}`,\n      cancelUrl: `https://movie-rental-3745e.web.app/movie/${movie.id}`,\n    });\n    // If `redirectToCheckout` fails due to a browser or network\n    // error, display the localized error message to your customer\n    // using `error.message`.\n  };\n  let genre = movie.genres,\n    genresList = nestedDataToString(genre),\n    totalRevenue = movie.revenue,\n    noData = '-';\n  if (totalRevenue === 'undefined' || totalRevenue === 0) {\n    totalRevenue = noData;\n  } else {\n    totalRevenue = numeral(movie.revenue).format('($0,0)');\n  }\n\n  return (\n    <>\n      <Nav />\n      <div id='gradient__container'></div>\n      <div\n        id='card__container'\n        style={{\n          backgroundSize: 'cover',\n          backgroundImage: `url(https://image.tmdb.org/t/p/original${movie?.backdrop_path}) `,\n          backgroundPosition: 'center center',\n        }}>\n        <div className='movie__card'>\n          <div className='movie__image'>\n            <Image\n              className='card__poster'\n              src={`${TMDB_IMAGE_BASE_URL}${movie.poster_path}`}\n              alt={movie.original_title}\n            />\n          </div>\n          <div className='movie__detail'>\n            <Header as='h2'>{movie?.original_title}</Header>\n            <span className='tagline'>{movie?.tagline}</span>\n            <p className='movie__overview'>{movie?.overview}</p>\n            <div className='additional-details'>\n              <span className='genre-list'>{genresList}</span>\n              <span className='production-list'>{}</span>\n              <div className='row padding release-details'>\n                <div className='movie__stats'>\n                  Original Release:{' '}\n                  <span className='meta-data'>{movie.release_date}</span>\n                </div>\n                <div className='movie__stats'>\n                  Running Time:{' '}\n                  <span className='meta-data'>{movie.runtime} mins</span>{' '}\n                </div>\n                <div className='movie__stats'>\n                  Box Office: <span className='meta-data'>{totalRevenue}</span>\n                </div>\n                <div className='movie__stats'>\n                  Vote Average:{' '}\n                  <span className='meta-data'>{movie.vote_average}/10</span>\n                </div>\n              </div>\n            </div>\n            <button\n              role='link'\n              onClick={handleClick}\n              color='grey'\n              content='Grey'\n              className='movie__button'>\n              Purchase for $30\n            </button>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default Movie;\n","import React, { useState, useEffect } from 'react';\nimport axios from './axios.js';\nimport './Row.css';\nimport Movie from './Movie';\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\nimport { Route, Link } from 'react-router-dom';\nimport Slider from 'react-slick';\nimport { Header, Image } from 'semantic-ui-react';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\nfunction Row({ fetchUrl }) {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      console.log(request);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  let settings = {\n    dots: true,\n    arrows: true,\n    speed: 500,\n    slidesToShow: 5,\n    slidesToScroll: 5,\n    responsive: [\n      {\n        breakpoint: 1800,\n        settings: {\n          slidesToShow: 4,\n          slidesToScroll: 4,\n        },\n      },\n      {\n        breakpoint: 1500,\n        settings: {\n          slidesToShow: 3,\n          slidesToScroll: 3,\n        },\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n    ],\n  };\n  return (\n    <div className='row'>\n      <div className='row__posters'>\n        <Slider {...settings}>\n          {movies.map((movie) => (\n            <div className='poster__card' key={movie.id}>\n              <Image\n                className='row__poster'\n                src={`${TMDB_IMAGE_BASE_URL}${movie.poster_path}`}\n                alt={movie.original_title}\n              />\n              <div className='movie__text'>\n                <Header as='h3'>{movie.original_title}</Header>\n                <div className='poster__buttons'>\n                  <Link\n                    basic\n                    color='grey'\n                    content='Grey'\n                    className='poster__button'\n                    to={`/movie/${movie.id}`}\n                    key={movie.id}>\n                    <AiOutlineInfoCircle /> More Info\n                  </Link>\n                </div>\n              </div>\n            </div>\n          ))}\n        </Slider>\n      </div>\n      <Route path={`/movie/:movieId`} component={Movie} />\n    </div>\n  );\n}\n\nexport default Row;\n","import React from 'react';\nimport './App.css';\nimport Banner from './Banner';\nimport Row from './Row';\nimport requests from './requests';\nimport { Tab } from 'semantic-ui-react';\nimport Nav from './Nav.js';\nimport Footer from './Footer.js';\nconst panes = [\n  {\n    menuItem: 'On Demand',\n    render: () => (\n      <Tab.Pane attached={false}>\n        <Row fetchUrl={requests.getTrending} />\n      </Tab.Pane>\n    ),\n  },\n  {\n    menuItem: 'Coming Soon',\n    render: () => (\n      <Tab.Pane attached={false}>\n        <Row fetchUrl={requests.getUpcoming} />\n      </Tab.Pane>\n    ),\n  },\n];\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className='App'>\n        <Nav />\n        <Banner />\n        <Tab menu={{ secondary: true, pointing: true }} panes={panes} />\n        <Footer />\n      </div>\n    );\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport Nav from './Nav';\nimport { Image } from 'semantic-ui-react';\nimport { AiFillCheckCircle } from 'react-icons/ai';\nimport axios from './axios';\nimport './Success.css';\n\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY;\nconst TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\nfunction Success(props) {\n  const { movieId } = props.match.params;\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(\n        `/movie/${movieId}?api_key=${TMDB_API_KEY}&language=en-US`\n      );\n      setMovie(request.data);\n      return request;\n    }\n    fetchData();\n  }, [movieId]);\n  console.log(movie);\n  return (\n    <>\n      <Nav />\n      <div className='icon__container'>\n        <AiFillCheckCircle />\n      </div>\n      <p className='success__text'>Hooray, you're all set!</p>\n      <Image\n        className='success__image'\n        src={`${TMDB_IMAGE_BASE_URL}${movie.poster_path}`}\n        alt={movie.original_title}\n      />\n      <p className='another__text'>\n        <span className='bold__text'>{movie.original_title}</span> will be\n        shipped to you within 3 business days\n      </p>\n    </>\n  );\n}\n\nexport default Success;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport './index.css';\nimport App from './App';\nimport Movie from './Movie';\nimport Success from './Success';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nconst routes = (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path='/' component={App} />\n      <Route path='/movie/:movieId' component={Movie} />\n      {/* <Route path='/checkout/:movieId' component={Purchase} /> */}\n      <Route path='/success/:movieId' component={Success} />\n      <Redirect from='/' exact to='/home' />\n    </Switch>\n  </BrowserRouter>\n);\nReactDOM.render(routes, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}